import { type NextPage } from "next";
import Image from "next/image";
import Head from "next/head";
import { useState } from "react";
import { SignedIn, SignedOut, SignInButton, UserButton } from "@clerk/nextjs";
import cn from "classnames";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Spinner from "~/components/spinner";

import { api, type RouterOutputs } from "~/utils/api";

dayjs.extend(relativeTime);

const Home: NextPage = () => {
  api.posts.getAll.useQuery();

  return (
    <>
      <Head>
        <title>Trash Posting</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={cn(
          "bg-gradient-to-b from-[#111827] to-[#030712] text-white"
        )}
      >
        <div
          className={cn(
            "flex h-screen flex-col items-center justify-start overflow-y-scroll",
            "mx-auto w-full border-x border-white  md:w-[720px] "
          )}
        >
          <CreatePostWizard />
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;

type PostData = RouterOutputs["posts"]["getAll"][number];

const PostView = ({ postData }: { postData: PostData }) => {
  return (
    <div className="flex w-full gap-x-5 border-b border-white p-5">
      <div className="relative col-span-1 h-[64px] w-[64px] ">
        <Image
          alt={`@${postData.author.userName} avatar`}
          src={postData.author.profileImageUrl}
          fill
          className="rounded-full"
        />
      </div>
      <div className="col-span-3">
        <div className="font-sm flex gap-x-1 text-gray-300">
          <span>@{postData.author.userName}</span>
          <span>{`Â· ${dayjs(postData.post.createdAt).fromNow()}`}</span>
        </div>
        <div className="mt-1 flex text-lg">{postData.post.content}</div>
      </div>
    </div>
  );
};

const CreatePostWizard = () => {
  const ctx = api.useContext();
  const createPostMutation = api.posts.create.useMutation({
    onSuccess: () => {
      setContent("");
      void ctx.posts.getAll.invalidate();
    },
  });
  const [leftLettersCount, setleftLettersCount] = useState(288);
  const [content, setContent] = useState("");

  return (
    <div className="flex w-full flex-col border-b border-white p-5">
      <SignedOut>
        <SignInButton />
      </SignedOut>
      <SignedIn>
        <div className="flex w-full items-start gap-x-5">
          <UserButton
            appearance={{
              elements: {
                userButtonAvatarBox: "w-16 h-16",
                userButtonPopoverFooter: "hidden",
              },
            }}
          />

          <textarea
            className="grow resize-none bg-transparent outline-none"
            placeholder="Type something to post"
            rows={2}
            value={content}
            onChange={(e) => {
              setleftLettersCount(280 - e.target.value.length);
              setContent(e.target.value);
            }}
            maxLength={280}
            disabled={createPostMutation.isLoading}
          />
          {content.length > 0 && (
            <button
              onClick={() => {
                createPostMutation.mutate({ content });
              }}
            >
              Post
            </button>
          )}
        </div>
        <p className=" text-right text-sm text-gray-400">
          {leftLettersCount} characters left
        </p>
      </SignedIn>
    </div>
  );
};

const Feed = () => {
  const {
    data: posts,
    isLoading: postsLoading,
    isError: postsError,
  } = api.posts.getAll.useQuery();
  if (postsLoading) return <Spinner />;
  if (postsError) return <p>something went wrong {"X("}</p>;
  return (
    <>
      {posts.map((post) => (
        <PostView key={post.post.id} postData={post} />
      ))}
    </>
  );
};
